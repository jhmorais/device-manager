// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/jhmorais/device-manager/internal/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// DeviceRepository is an autogenerated mock type for the DeviceRepository type
type DeviceRepository struct {
	mock.Mock
}

// CreateDevice provides a mock function with given fields: ctx, entity
func (_m *DeviceRepository) CreateDevice(ctx context.Context, entity *entities.Device) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Device) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteDevice provides a mock function with given fields: ctx, entity
func (_m *DeviceRepository) DeleteDevice(ctx context.Context, entity *entities.Device) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Device) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindDevice provides a mock function with given fields: ctx, brand, name
func (_m *DeviceRepository) FindDevice(ctx context.Context, brand string, name string) (*entities.Device, error) {
	ret := _m.Called(ctx, brand, name)

	var r0 *entities.Device
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entities.Device); ok {
		r0 = rf(ctx, brand, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, brand, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDeviceByBrand provides a mock function with given fields: ctx, brand
func (_m *DeviceRepository) FindDeviceByBrand(ctx context.Context, brand string) ([]*entities.Device, error) {
	ret := _m.Called(ctx, brand)

	var r0 []*entities.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) []*entities.Device); ok {
		r0 = rf(ctx, brand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, brand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDeviceByID provides a mock function with given fields: ctx, id
func (_m *DeviceRepository) FindDeviceByID(ctx context.Context, id string) (*entities.Device, error) {
	ret := _m.Called(ctx, id)

	var r0 *entities.Device
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Device); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevice provides a mock function with given fields: ctx
func (_m *DeviceRepository) ListDevice(ctx context.Context) ([]*entities.Device, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.Device
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Device); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, entity
func (_m *DeviceRepository) UpdateDevice(ctx context.Context, entity *entities.Device) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Device) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewDeviceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDeviceRepository creates a new instance of DeviceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDeviceRepository(t mockConstructorTestingTNewDeviceRepository) *DeviceRepository {
	mock := &DeviceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
