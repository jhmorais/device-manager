// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	output "github.com/jhmorais/device-manager/internal/usecases/ports/output"
)

// FindDeviceByBrandUseCase is an autogenerated mock type for the FindDeviceByBrandUseCase type
type FindDeviceByBrandUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, brand
func (_m *FindDeviceByBrandUseCase) Execute(ctx context.Context, brand string) (*output.ListDeviceOutput, error) {
	ret := _m.Called(ctx, brand)

	var r0 *output.ListDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, string) *output.ListDeviceOutput); ok {
		r0 = rf(ctx, brand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.ListDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, brand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFindDeviceByBrandUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewFindDeviceByBrandUseCase creates a new instance of FindDeviceByBrandUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindDeviceByBrandUseCase(t mockConstructorTestingTNewFindDeviceByBrandUseCase) *FindDeviceByBrandUseCase {
	mock := &FindDeviceByBrandUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
