// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	output "github.com/jhmorais/device-manager/internal/usecases/ports/output"
)

// FindDeviceUseCase is an autogenerated mock type for the FindDeviceUseCase type
type FindDeviceUseCase struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, brand, name
func (_m *FindDeviceUseCase) Execute(ctx context.Context, brand string, name string) (*output.FindDeviceOutput, error) {
	ret := _m.Called(ctx, brand, name)

	var r0 *output.FindDeviceOutput
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *output.FindDeviceOutput); ok {
		r0 = rf(ctx, brand, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*output.FindDeviceOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, brand, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFindDeviceUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewFindDeviceUseCase creates a new instance of FindDeviceUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFindDeviceUseCase(t mockConstructorTestingTNewFindDeviceUseCase) *FindDeviceUseCase {
	mock := &FindDeviceUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
